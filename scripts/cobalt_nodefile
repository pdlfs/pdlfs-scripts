#!/usr/bin/env perl

#
# Copyright (c) 2019 Carnegie Mellon University,
# Copyright (c) 2019 Triad National Security, LLC, as operator of
#     Los Alamos National Laboratory.
#
# All rights reserved.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file. See the AUTHORS file for names of contributors.
#

#
# cobalt_nodefile  a uniform way to generate a nodefile under cobalt
# 15-Feb-2019  chuck@ece.cmu.edu
#
# XXX: some cobalts use NODEFILE, others use PARTNAME.  handle both.
#
use strict;

my($outfile) = @ARGV;
die "usage: cobalt_nodefile [output-file]" unless ($outfile ne "");

#
# strategy #1: use COBALT_NODEFILE if present
#
if (defined($ENV{'COBALT_NODEFILE'}) && -s $ENV{'COBALT_NODEFILE'}) {
  my($cmd);
  $cmd = "cp " . $ENV{'COBALT_NODEFILE'} . " $outfile";
  $_ = system($cmd);
  die "cp command failed $_ ! ($cmd)" if ($_);
  exit(0);
}

#
# strategy #2: use COBALT_PARTNAME
#
die "error: neither COBALT_NODEFILE nor COBALT_PARTNAME provided"
    unless (defined($ENV{'COBALT_PARTNAME'}));

#
# partly based on the run_on_all_nids.py script I got from phil
#
my(@nidgroups, $nidgroup, $s, $e, %nidset, $result);
@nidgroups = split(/,/, $ENV{'COBALT_PARTNAME'});
foreach $nidgroup (@nidgroups) {
  if ($nidgroup =~ /^(\d+)-(\d+)$/) {
    if ($1 <= $2) {
      $s = $1; $e = $2;
    } else {
      $s = $2; $e = $1;
    }
  } elsif ($nidgroup =~ /^(\d+)$/) {
    $s = $e = $1;
  } else {
    die "bad COBALT_PARTNAME value: " . $ENV{'COBALT_PARTNAME'};
  }
  while ($s <= $e) {
    $nidset{$s++} = 1;
  }
}

$result = join("\n", sort { $a <=> $b } keys %nidset) . "\n";
open(OUTPUT, ">$outfile") || die "cannot open $outfile ($!)";
die "write error ($!)" if (!print(OUTPUT $result) || !close(OUTPUT));
exit(0);
