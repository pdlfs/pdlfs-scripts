#!/bin/bash

#
# Copyright (c) 2019 Carnegie Mellon University,
# Copyright (c) 2019 Triad National Security, LLC, as operator of
#     Los Alamos National Laboratory.
#
# All rights reserved.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file. See the AUTHORS file for names of contributors.
#

set -euo pipefail

#########################################
# default values for tunable parameters #
#########################################

arg_test_type="baseline"  ## or deltafs, shuffle_test, ...
arg_host_suffix=""
arg_ip_subnet="10.111"
arg_nodes="1"
arg_procs_per_node="4"
arg_cpubind="none"
arg_num_vpic_dumps="2"
arg_num_vpic_steps="200"
arg_px="$((arg_nodes * arg_procs_per_node * 4))"
arg_py="$((10**2))"
arg_pz="1"
arg_tx="$((arg_nodes * arg_procs_per_node))"
arg_ty="1"
arg_tz="1"
arg_pvtcnt="256"
arg_intvl="250000"
arg_deckid="trecon-part/turbulence"
arg_bbos_buddies="0"
arg_should_skip_query="0"
arg_should_do_multipass_query="0"
# set the lib to preload or leave it empty to avoid preloading anything
arg_pre="${VPIC_PRE-libdeltafs-preload.so}"
# preload for the query/read phase
arg_pre_q="${VPIC_QUERY_PRE-}"
# if set, will use the specified io skeleton program to emulate
# the io pattern and will skip building a real vpic deck
arg_emu="${VPIC_EMU-}"
arg_emu_opts="${VPIC_EMU_OPTS-}"

###############
# Core script #
###############

source @CMAKE_INSTALL_PREFIX@/scripts/common.sh
source ${dfsu_prefix}/scripts/vpic_common.sh

# load command line args into $arg_* vars (overwrites default values)
loadargs "$@"

# XXX: jam args back into global variables shared with common.sh
host_suffix="$arg_host_suffix"
ip_subnet="$arg_ip_subnet"
nodes="$arg_nodes"
vpic_cpubind="$arg_cpubind"
vpic_epochs="$arg_num_vpic_dumps"
vpic_steps="$arg_num_vpic_steps"
vpic_use_vpic407="@VPIC407@"          # lets vpic_common.sh know what to use
bbos_buddies="$arg_bbos_buddies"

message "Script begin..."
# keep track of start time so we can see how long this takes
timein=`date`

### lustre ###
get_jobdir
### bb ###
get_bbdir
### machine list ###
gen_hosts

### set read path ###
last=$arg_should_do_multipass_query
if [ $arg_should_skip_query -ne 0 ]
then
vpic_do_querying=0
else
vpic_do_querying=1
fi

cores=$((arg_procs_per_node * nodes))
parts=$((arg_px * arg_py * arg_pz * 100))

### determine vpic input deck ###
case $arg_test_type in
"baseline")
    deck="file-per-process"
    ;;

*)
    deck="file-per-particle"
    ;;

esac

### other options ###
case $arg_test_type in
"shuffle_test")
    export XX_BYPASS_WRITE=1
    ;;
"carp")
    export XX_CARP_ON=1
    export NEXUS_BYPASS_LOCAL=1
    export XX_SH_THREE_HOP=1
    export XX_CARP_DYNTRIG=0
    export XX_CARP_INTVL=$arg_intvl
    export XX_RTP_PVTCNT=$arg_pvtcnt
    ;;

esac

if [ ${XX_BYPASS_WRITE:-0} -ne 0 -a $vpic_do_querying -ne 0 ]; then
    message "!!! WRITE BYPASSED MUST SKIP QUERIES"
    vpic_do_querying=0
fi

# prepare the job input deck or use an io emulator
if [ x"$arg_emu" != x ]; then
    prog="${dfsu_prefix}/bin/${arg_emu} ${arg_emu_opts} $deck $arg_deckid \
        $arg_px $arg_py $arg_pz $arg_tx $arg_ty $arg_tz \
        $arg_num_vpic_dumps $arg_num_vpic_steps"
else
    vpic_build_deck $deck $arg_deckid $arg_px $arg_py $arg_pz \
             $arg_tx $arg_ty $arg_tz $arg_num_vpic_dumps $arg_num_vpic_steps
    prog="${jobdir}/current-deck.op"
fi

# prepare the lib for LD_PRELOAD
if [ x"$arg_pre" != x ]; then
    preload_list "${dfsu_prefix}/lib" "$arg_pre" prog_pre
else
    prog_pre=
fi
# query/read side
if [ x"$arg_pre_q" != x ]; then
    preload_list "${dfsu_prefix}/lib" "$arg_pre_q" prog_pre_q
else
    prog_pre_q=
fi

message ""
message ""

vpic_do_run $arg_test_type $parts $arg_procs_per_node \
    "$prog" "$prog_pre" "$prog_pre_q"

# overall time
timeout=`date`

message "Script complete!"
message "start: ${timein}"
message "  end: ${timeout}"

exit 0
