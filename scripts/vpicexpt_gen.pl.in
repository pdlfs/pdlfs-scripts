#!/usr/bin/env perl

#
# Copyright (c) 2019 Carnegie Mellon University,
# Copyright (c) 2019 Triad National Security, LLC, as operator of
#     Los Alamos National Laboratory.
#
# All rights reserved.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file. See the AUTHORS file for names of contributors.
#

#
# vpiexpt_gen.pl  generate vpic experiment
# 31-May-2017  chuck@ece.cmu.edu
#

use strict;

#
# we define important experiment configs (e.g. ones used for papers)
# in this script so the configs are preserved in git.   additional
# non-critical experiments can be added using "--loadfile" ...
#
# the current list of experiments is stored in %TOC (i.e. table-of-contents).
# the key is the experiment name, the value is the experiment config.
# an experiment consists of an array of N runs (numbered 0 to N-1) and
# an optional post-processing function.  The post-processing function
# (if provided) is applied to a run to adjust the params (e.g. scaling
# the params upward).
#
# a run has the following params:
#   number of nodes, number of dumps, number of vpic steps per dump,
#   PX, PY, PZ,  TX, TY, TZ,  procs-per-node, max time, xtra time, dwsize.
#
#  PX/PY/PZ is the particle distribution
#  TX/TY/TZ is the node topology
#
#  max time and xtra time are applied when using batch systems like
#  slurm where you have to specify the max run time of a batch job.
#
#  dwsize is the Cray DataWarp burstbuffer size (only relevant on
#  a Cray with a burst buffer).
#
# the number of particles is PX*PY*PZ*100
#
# the numeric args for a deck are: PX PY PZ  TX TY TZ  DUMPS STEPS
#
#    -  note that the numbers passed to the deck are the ones from
#       the config file after they've been through the post-processing
#       function... e.g. stdpost_2d()
#
#    - note that run_vpic_test.sh passes the numeric args to the
#      deck building script as args (they'll end up in vpic config.h).
#      but if you are using a emulator program (e.g. preload-runner),
#      then the numeric args get passed on the command line.
#

##############################################################################
# define experiments here
##############################################################################
my(%TOC, @minimal, @dwtest, @fanrun);
my(@carp8m);
my(@cs19a, @cs19b, @cs19c, @cs19d, @cs19e, @cs19f,
@pd18a, @pd18b, @pd18c, @pd18d, @pd18e, @pd18f, @pd18h,
@pd18i, @pd18j, @pd18x, @pd18y, @sc18a, @sc18b, @sc18c,
@sc18d, @sc18e, @sc18f, @sc18k, @sc18l, @sc18r, @sc18n,
@sc18s, @sc18w, @sc17a, @sc17b, @sc17ba, @sc17bb,
@sc17bi, @sc17bj, @sc17br, @sc17bx, @sc17c,
@sc17cx);

# carp8m for a basic param sweep with the "BigCARP" trace
# last 3 params not set properly
@carp8m = (
#         vpic   vpic                                                     max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, pvtcnt, intvl, time, xtra, dwsize
[     1,     5,    5,   56,   4,   0,   0,   1,   1,   64,   256,   250000,  10,    5, "32GiB"],
[     1,     5,    5,   56,   4,   0,   0,   1,   1,   64,   256,   500000,  10,    5, "32GiB"],
[     1,     5,    5,   56,   4,   0,   0,   1,   1,   64,   256,   750000,  10,    5, "32GiB"],
[     1,     5,    5,   56,   4,   0,   0,   1,   1,   64,   256,   1000000,  10,    5, "32GiB"],
);

# minimal: for quick tests of script infrastructure
@minimal = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra, dwsize
[     2,     2,    50,   4,   2,   0,   0,   1,   1,   4,   10,    5, "32GiB"],
[     1,     2,    50,   4,   2,   0,   0,   1,   1,   4,   10,    5, "32GiB"],
[     2,     2,    50,   4,   2,   0,   0,   1,   1,   4,   10,    5, "32GiB"],
[     4,     2,    50,   4,   2,   0,   0,   1,   1,   4,   10,    5, "32GiB"],
);

# dwtest: for testing the burst-buffer system
@dwtest = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra, dwsize
[     1,     1,    10,   4,   2,   0,   0,   1,   1,   4,   10,    1,   "32GiB"],
[     1,     1,    10,   4,   2,   0,   0,   1,   1,   4,   10,    1, "1024GiB"],
[     1,     1,    10,   4,   2,   0,   0,   1,   1,   4,   10,    1, "2048GiB"],
[     1,     1,    10,   4,   2,   0,   0,   1,   1,   4,   10,    1, "3072GiB"],
[     1,     1,    10,   4,   2,   0,   0,   1,   1,   4,   10,    1, "4096GiB"],
[     1,     1,    10,   4,   2,   0,   0,   1,   1,   4,   10,    1, "5120GiB"],
);

# Fan run: for the run that Fan requested
@fanrun = (
#         vpic   vpic                       max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra, dwsize
[    512,     0,    0,2048,   1,1536, 256,   1,   2,  32,   10,    5, "1GiB"],
);

# sc17a: for the early exps performed for sc17, deprecated!
@sc17a = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,   250,   4,   2,   0,   0,   1,   1,   8,   10,    0,    "25GiB"],
[     1,     8,  1000,  16,   4,   0,   0,   1,   1,   8,  100,    0,    "25GiB"],
[     4,     8,  1000,  16,   4,   0,   0,   1,   1,   8,  100,    0,    "25GiB"],
[    16,     8,  1000,  16,   4,   0,   0,   1,   1,   8,  100,    0,    "25GiB"],
[    64,     8,  1000,  16,   4,   0,   0,   1,   1,   8,  100,    0,    "25GiB"],
);

# cs19a: for the ics19 KNL paper
@cs19a = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     1,    25,   2,   2,   0,   0,   1,   1,  68,   10,    1,    "32GiB"],
[     1,     1,    25,   8,   4,   0,   0,   1,   1,  68,  150,   10,   "192GiB"],
[     2,     1,    25,   8,   4,   0,   0,   1,   1,  68,  150,   10,   "192GiB"],
[     4,     1,    25,   8,   4,   0,   0,   1,   1,  68,  150,   10,   "192GiB"],
[     8,     1,    25,   8,   4,   0,   0,   1,   1,  68,  150,   10,   "384GiB"],
[    16,     1,    25,   8,   4,   0,   0,   1,   1,  68,  150,   10,   "768GiB"],
[    32,     1,    25,   8,   4,   0,   0,   1,   1,  68,  150,   10,  "1536GiB"],
[    64,     1,    25,   8,   4,   0,   0,   1,   1,  68,  150,   10,  "3072GiB"],
[    96,     1,    25,   8,   4,   0,   0,   1,   1,  68,  150,   10,  "4608GiB"],
);

# cs19b: for the ics19 KNL paper
@cs19b = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     1,    25,   2,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[     1,     1,    25,  16,   4,   0,   0,   1,   1,  32,  150,   10,   "192GiB"],
[     2,     1,    25,  16,   4,   0,   0,   1,   1,  32,  150,   10,   "192GiB"],
[     4,     1,    25,  16,   4,   0,   0,   1,   1,  32,  150,   10,   "192GiB"],
[     8,     1,    25,  16,   4,   0,   0,   1,   1,  32,  150,   10,   "384GiB"],
[    16,     1,    25,  16,   4,   0,   0,   1,   1,  32,  150,   10,   "768GiB"],
[    32,     1,    25,  16,   4,   0,   0,   1,   1,  32,  150,   10,  "1536GiB"],
[    64,     1,    25,  16,   4,   0,   0,   1,   1,  32,  150,   10,  "3072GiB"],
[    96,     1,    25,  16,   4,   0,   0,   1,   1,  32,  150,   10,  "4608GiB"],
);

# cs19c: for the ics19 KNL paper (px=16)
@cs19c = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     1,    25,   2,   2,   0,   0,   1,   1,  64,   10,    1,    "32GiB"],
[     1,     1,    25,  16,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     2,     1,    25,  16,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     4,     1,    25,  16,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     8,     1,    25,  16,   4,   0,   0,   1,   1,  64,  150,   10,   "384GiB"],
[    16,     1,    25,  16,   4,   0,   0,   1,   1,  64,  150,   10,   "768GiB"],
[    32,     1,    25,  16,   4,   0,   0,   1,   1,  64,  150,   10,  "1536GiB"],
[    64,     1,    25,  16,   4,   0,   0,   1,   1,  64,  150,   10,  "3072GiB"],
[    96,     1,    25,  16,   4,   0,   0,   1,   1,  64,  150,   10,  "4608GiB"],
);

# cs19d: for the ics19 KNL paper (px=8)
@cs19d = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     1,    25,   2,   2,   0,   0,   1,   1,  64,   10,    1,    "32GiB"],
[     1,     1,    25,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     2,     1,    25,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     4,     1,    25,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     8,     1,    25,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "384GiB"],
[    16,     1,    25,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "768GiB"],
[    32,     1,    25,   8,   4,   0,   0,   1,   1,  64,  150,   10,  "1536GiB"],
[    64,     1,    25,   8,   4,   0,   0,   1,   1,  64,  150,   10,  "3072GiB"],
[    96,     1,    25,   8,   4,   0,   0,   1,   1,  64,  150,   10,  "4608GiB"],
);

# cs19e: for the ics19 KNL paper (px=4)
@cs19e = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     1,    25,   2,   2,   0,   0,   1,   1,  64,   10,    1,    "32GiB"],
[     1,     1,    25,   4,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     2,     1,    25,   4,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     4,     1,    25,   4,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     8,     1,    25,   4,   4,   0,   0,   1,   1,  64,  150,   10,   "384GiB"],
[    16,     1,    25,   4,   4,   0,   0,   1,   1,  64,  150,   10,   "768GiB"],
[    32,     1,    25,   4,   4,   0,   0,   1,   1,  64,  150,   10,  "1536GiB"],
[    64,     1,    25,   4,   4,   0,   0,   1,   1,  64,  150,   10,  "3072GiB"],
[    96,     1,    25,   4,   4,   0,   0,   1,   1,  64,  150,   10,  "4608GiB"],
);

# cs19f: for the ics19 KNL paper (px=2)
@cs19f = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     1,    25,   2,   2,   0,   0,   1,   1,  64,   10,    1,    "32GiB"],
[     1,     1,    25,   2,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     2,     1,    25,   2,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     4,     1,    25,   2,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     8,     1,    25,   2,   4,   0,   0,   1,   1,  64,  150,   10,   "384GiB"],
[    16,     1,    25,   2,   4,   0,   0,   1,   1,  64,  150,   10,   "768GiB"],
[    32,     1,    25,   2,   4,   0,   0,   1,   1,  64,  150,   10,  "1536GiB"],
[    64,     1,    25,   2,   4,   0,   0,   1,   1,  64,  150,   10,  "3072GiB"],
[    96,     1,    25,   2,   4,   0,   0,   1,   1,  64,  150,   10,  "4608GiB"],
);

# pd18a: for the pdsw18 KNL paper
@pd18a = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  68,   10,    1,    "32GiB"],
[    32,     5,   125,  32,   4,   0,   0,   1,   1,  17,  150,   10,  "6528GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  34,  150,   10,  "6528GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,  "6528GiB"],
[    32,     5,   125,   4,   4,   0,   0,   1,   1, 136,  150,   10,  "6528GiB"],
[    32,     5,   125,   2,   4,   0,   0,   1,   1, 272,  150,   10,  "6528GiB"],
);

# pd18b: for the pdsw18 KNL paper (Weak-Scaling)
@pd18b = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  68,   10,    1,    "32GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  17,  150,   10,  "1632GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  34,  150,   10,  "3264GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,  "6528GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1, 136,  150,   10, "13056GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1, 272,  150,   10, "26112GiB"],
);

# pd18c: for the pdsw18 KNL paper (Weak-Scaling, Smaller PPNs)
@pd18c = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  68,   10,    1,    "32GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   1,  150,   10,    "96GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   2,  150,   10,   "192GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   4,  150,   10,   "384GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   8,  150,   10,   "768GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  16,  150,   10,  "1536GiB"],
);

# pd18d: for the pdsw18 KNL paper (Multiple Main Threads, Base PPN=1 w/ 16 Million Particles)
@pd18d = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  68,   10,    1,    "32GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,   1,  150,   10,   "192GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   2,  150,   10,   "192GiB"],
[    32,     5,   125,   4,   4,   0,   0,   1,   1,   4,  150,   10,   "192GiB"],
[    32,     5,   125,   2,   4,   0,   0,   1,   1,   8,  150,   10,   "192GiB"],
[    32,     5,   125,   1,   4,   0,   0,   1,   1,  16,  150,   10,   "192GiB"],
);

# pd18e: for the pdsw18 KNL paper (Strong-Scaling)
@pd18e = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,   2,   10,    1,    "32GiB"],
[    32,     5,   125, 512,   4,   0,   0,   1,   1,   1,  150,   10,  "6144GiB"],
[    32,     5,   125, 256,   4,   0,   0,   1,   1,   2,  150,   10,  "6144GiB"],
[    32,     5,   125, 128,   4,   0,   0,   1,   1,   4,  150,   10,  "6144GiB"],
[    32,     5,   125,  64,   4,   0,   0,   1,   1,   8,  150,   10,  "6144GiB"],
[    32,     5,   125,  32,   4,   0,   0,   1,   1,  16,  150,   10,  "6144GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  32,  150,   10,  "6144GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,  "6144GiB"],
[    32,     5,   125,   4,   4,   0,   0,   1,   1, 128,  150,   10,  "6144GiB"],
[    32,     5,   125,   2,   4,   0,   0,   1,   1, 256,  150,   10,  "6144GiB"],
);

# pd18f: for the pdsw18 KNL paper (Weak-Scaling)
@pd18f = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,   2,   10,    1,    "32GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   1,  150,   10,    "96GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   2,  150,   10,   "192GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   4,  150,   10,   "384GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,   8,  150,   10,   "768GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  16,  150,   10,  "1536GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  32,  150,   10,  "3072GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,  "6144GiB"],
);

# pd18h: for the pdsw18 KNL paper (Haswell)
@pd18h = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,   8,  150,   10,  "1632GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  16,  150,   10,  "3264GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  32,  150,   10,  "6528GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  64,  150,   10, "13056GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1, 128,  150,   10, "26112GiB"],
);

# pd18i: for the pdsw18 KNL paper (Strong-Scaling, Similar to pd18e Except the Node Count)
@pd18i = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,   2,   10,    1,    "32GiB"],
[     1,     5,   125, 512,   4,   0,   0,   1,   1,   1,  150,   10,   "192GiB"],
[     1,     5,   125, 256,   4,   0,   0,   1,   1,   2,  150,   10,   "192GiB"],
[     1,     5,   125, 128,   4,   0,   0,   1,   1,   4,  150,   10,   "192GiB"],
[     1,     5,   125,  64,   4,   0,   0,   1,   1,   8,  150,   10,   "192GiB"],
[     1,     5,   125,  32,   4,   0,   0,   1,   1,  16,  150,   10,   "192GiB"],
[     1,     5,   125,  16,   4,   0,   0,   1,   1,  32,  150,   10,   "192GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     1,     5,   125,   4,   4,   0,   0,   1,   1, 128,  150,   10,   "192GiB"],
[     1,     5,   125,   2,   4,   0,   0,   1,   1, 256,  150,   10,   "192GiB"],
);

# pd18j: for the pdsw18 KNL paper (Weak-Scaling, Similar to pd18f Except the Node Count)
@pd18j = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,   2,   10,    1,    "32GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,   1,  150,   10,   "192GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,   2,  150,   10,   "192GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,   4,  150,   10,   "192GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,   8,  150,   10,   "192GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,  16,  150,   10,   "192GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,  32,  150,   10,   "192GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
);

# pd18x: for the pdsw18 KNL paper
@pd18x = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  68,   10,    1,     "32GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,    "224GiB"],
[     2,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,    "416GiB"],
[     4,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,    "832GiB"],
[     8,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,   "1632GiB"],
[    16,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,   "3264GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,   "6528GiB"],
[    64,     5,   125,   8,   4,   0,   0,   1,   1,  68,  150,   10,  "13056GiB"],
);

# pd18y: for the pdsw18 KNL paper
@pd18y = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  68,   10,    1,     "32GiB"],
[     1,     5,   125,  16,   4,   0,   0,   1,   1,  68,  150,   10,    "416GiB"],
[     2,     5,   125,  16,   4,   0,   0,   1,   1,  68,  150,   10,    "832GiB"],
[     4,     5,   125,  16,   4,   0,   0,   1,   1,  68,  150,   10,   "1632GiB"],
[     8,     5,   125,  16,   4,   0,   0,   1,   1,  68,  150,   10,   "3264GiB"],
[    16,     5,   125,  16,   4,   0,   0,   1,   1,  68,  150,   10,   "6528GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  68,  150,   10,  "13056GiB"],
[    64,     5,   125,  16,   4,   0,   0,   1,   1,  68,  150,   10,  "26112GiB"],
);


# sc18a: for the sc18 practive paper (LevelDB, LANL-Trinitite)
@sc18a = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[    32,     1,    25, 256,   1,   0,   0,   1,   1,  32,   90,    1,  "5120GiB"],
[    32,     2,    50, 256,   1,   0,   0,   1,   1,  32,   90,    1,  "5120GiB"],
[    32,     3,    75, 256,   1,   0,   0,   1,   1,  32,   90,    1,  "5120GiB"],
[    32,     4,   100, 256,   1,   0,   0,   1,   1,  32,   90,    1,  "5120GiB"],
[    32,     5,   125, 256,   1,   0,   0,   1,   1,  32,   90,    1,  "5120GiB"],
[    32,     6,   150, 256,   1,   0,   0,   1,   1,  32,   90,    1,  "5120GiB"],
);

# sc18b: for the sc18 practive paper (LevelDB, LANL-Trinitite)
@sc18b = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[    32,     1,    25,   4,   4,   0,   0,   1,   1,  32,  120,   10,  "3072GiB"],
[    32,     2,    50,   4,   4,   0,   0,   1,   1,  32,  120,   10,  "3072GiB"],
[    32,     3,    75,   4,   4,   0,   0,   1,   1,  32,  120,   10,  "3072GiB"],
[    32,     4,   100,   4,   4,   0,   0,   1,   1,  32,  120,   10,  "3072GiB"],
[    32,     5,   125,   4,   4,   0,   0,   1,   1,  32,  120,   10,  "3072GiB"],
[    32,     6,   150,   4,   4,   0,   0,   1,   1,  32,  120,   10,  "3072GiB"],
);

# sc18c: for the sc18 practive paper (PDSW17-like, LANL-Trinitite)
@sc18c = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[     1,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "160GiB"],
[     2,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "320GiB"],
[     4,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "640GiB"],
[     8,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "1280GiB"],
[    16,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "2560GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "5120GiB"],
[    64,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10, "10240GiB"],
[    96,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10, "15360GiB"],
);

# sc18d: for the sc18 practive paper (Rate-Limiting, LANL-Trinitite)
@sc18d = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[     1,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "192GiB"],
[     2,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "384GiB"],
[     4,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "768GiB"],
[     8,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "1536GiB"],
[    16,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "3072GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "6144GiB"],
[    64,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10, "12288GiB"],
[    96,     5,   125,  16,   4,   0,   0,   1,   1,  32,  120,   10, "18432GiB"],
);

# sc18e: for the sc18 practive paper (Rate-Limiting, LANL-Trinitite, PPN=64)
@sc18e = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   8,   2,   0,   0,   1,   1,  64,   10,    1,    "32GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,  64,  120,   10,   "192GiB"],
[     2,     5,   125,   8,   4,   0,   0,   1,   1,  64,  120,   10,   "384GiB"],
[     4,     5,   125,   8,   4,   0,   0,   1,   1,  64,  120,   10,   "768GiB"],
[     8,     5,   125,   8,   4,   0,   0,   1,   1,  64,  120,   10,  "1536GiB"],
[    16,     5,   125,   8,   4,   0,   0,   1,   1,  64,  120,   10,  "3072GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  64,  120,   10,  "6144GiB"],
[    64,     5,   125,   8,   4,   0,   0,   1,   1,  64,  120,   10, "12288GiB"],
[    96,     5,   125,   8,   4,   0,   0,   1,   1,  64,  120,   10, "18432GiB"],
);

# sc18f: for the sc18 practive paper (Rate-Limiting, LANL-Trinitite, PPN=16)
@sc18f = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,  32,   2,   0,   0,   1,   1,  16,   10,    1,    "32GiB"],
[     1,     5,   125,  32,   4,   0,   0,   1,   1,  16,  120,   10,   "192GiB"],
[     2,     5,   125,  32,   4,   0,   0,   1,   1,  16,  120,   10,   "384GiB"],
[     4,     5,   125,  32,   4,   0,   0,   1,   1,  16,  120,   10,   "768GiB"],
[     8,     5,   125,  32,   4,   0,   0,   1,   1,  16,  120,   10,  "1536GiB"],
[    16,     5,   125,  32,   4,   0,   0,   1,   1,  16,  120,   10,  "3072GiB"],
[    32,     5,   125,  32,   4,   0,   0,   1,   1,  16,  120,   10,  "6144GiB"],
[    64,     5,   125,  32,   4,   0,   0,   1,   1,  16,  120,   10, "12288GiB"],
[    96,     5,   125,  32,   4,   0,   0,   1,   1,  16,  120,   10, "18432GiB"],
);

# sc18k: for the sc18 practive paper (KNL)
@sc18k = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  64,   10,    1,    "32GiB"],
[    32,     1,    25,   8,   4,   0,   0,   1,   1,  64,   90,   10,  "3072GiB"],
[    32,     2,    50,   8,   4,   0,   0,   1,   1,  64,   90,   10,  "3072GiB"],
[    32,     3,    75,   8,   4,   0,   0,   1,   1,  64,   90,   10,  "3072GiB"],
);

# sc18l: for the sc18 practive paper (KNL)
@sc18l = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   2,   2,   0,   0,   1,   1,  64,   10,    1,    "32GiB"],
[     1,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "192GiB"],
[     2,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "384GiB"],
[     4,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,   "768GiB"],
[     8,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,  "1536GiB"],
[    16,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,  "3072GiB"],
[    32,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10,  "6144GiB"],
[    64,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10, "12288GiB"],
[    96,     5,   125,   8,   4,   0,   0,   1,   1,  64,  150,   10, "18432GiB"],
);

# sc18r: for the sc18 practive paper (LANL-Trinity)
@sc18r = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,     "32GiB"],
[    32,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,    2,   "5120GiB"],
[    64,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,    4,  "10240GiB"],
[   128,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,    8,  "20480GiB"],
[   256,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,   16,  "40960GiB"],
[   512,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,   32,  "81920GiB"],
[  1024,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,   64, "163840GiB"],
[  2048,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,  128, "327680GiB"],
[  4096,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,  256, "655360GiB"],
[  8192,     5,   125,  16,   4,   0,   0,   1,   1,  32,  200,  512,"1310720GiB"],
);

# sc18n: for the sc18 practive paper (PDL-Narwhal)
@sc18n = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra, dwsize
[     1,     2,    10,   4,   2,   0,   0,   1,   1,   4,   30,   10, "0GiB"],
[     1,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[     2,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[     4,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[     8,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[    16,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[    32,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[    64,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[    96,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[   128,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[   160,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[   192,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[   224,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
[   256,     2,    10,   4,   4,   0,   0,   1,   1,   4,   45,   10, "0GiB"],
);

# sc18s: for the sc18 practive paper (PDL-Susitna)
@sc18s = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra, dwsize
[     1,     2,    10,   4,   2,   0,   0,   1,   1,  32,   30,   10, "0GiB"],
[     1,     5,    25,  16,   4,   0,   0,   1,   1,  32,   60,   10, "0GiB"],
[     2,     5,    25,  16,   4,   0,   0,   1,   1,  32,   60,   10, "0GiB"],
[     4,     5,    25,  16,   4,   0,   0,   1,   1,  32,   60,   10, "0GiB"],
[     8,     5,    25,  16,   4,   0,   0,   1,   1,  32,   60,   10, "0GiB"],
[    16,     5,    25,  16,   4,   0,   0,   1,   1,  32,   60,   10, "0GiB"],
[    32,     5,    25,  16,   4,   0,   0,   1,   1,  32,   60,   10, "0GiB"],
);

# sc18w: for the sc18 practive paper (PDSW17-like, Long-Compute, LANL-Trinitite)
@sc18w = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,   300,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[     1,     5,   750,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "160GiB"],
[     2,     5,   750,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "320GiB"],
[     4,     5,   750,  16,   4,   0,   0,   1,   1,  32,  120,   10,   "640GiB"],
[     8,     5,   750,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "1280GiB"],
[    16,     5,   750,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "2560GiB"],
[    32,     5,   750,  16,   4,   0,   0,   1,   1,  32,  120,   10,  "5120GiB"],
[    64,     5,   750,  16,   4,   0,   0,   1,   1,  32,  120,   10, "10240GiB"],
[    96,     5,   750,  16,   4,   0,   0,   1,   1,  32,  120,   10, "15360GiB"],
);

# sc17b: for testing the shuffle layer and the network stack
@sc17b = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,    1,    "96GiB"],
[     2,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,    2,   "192GiB"],
[     4,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,    3,   "384GiB"],
[     8,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,    4,   "768GiB"],
[    16,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,    5,  "1536GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,   10,  "3072GiB"],
);

# sc17ba: similar to sc17b but with a single node and scaling cores per node
#  - used to be named sc17bo
@sc17ba = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,   1,   30,    1,    "32GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,   2,   30,    2,    "32GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,   4,   30,    3,    "32GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,   8,   30,    4,    "32GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,  16,   30,    5,    "64GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,   10,    "96GiB"],
);

# sc17bb: similar to sc17b but with a single node and scaling px, py
@sc17bb = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[     1,     3,    75,  32,   1,   0,   0,   1,   1,  32,   30,    1,    "32GiB"],
[     1,     3,    75,  64,   1,   0,   0,   1,   1,  32,   30,    1,    "32GiB"],
[     1,     3,    75, 128,   1,   0,   0,   1,   1,  32,   30,    1,    "32GiB"],
[     1,     3,    75, 256,   1,   0,   0,   1,   1,  32,   30,    1,    "32GiB"],
[     1,     3,    75, 512,   1,   0,   0,   1,   1,  32,   30,    1,    "32GiB"],
[     1,     3,    75,   1,   4,   0,   0,   1,   1,  32,   30,    2,    "32GiB"],
[     1,     3,    75,   2,   4,   0,   0,   1,   1,  32,   30,    3,    "32GiB"],
[     1,     3,    75,   4,   4,   0,   0,   1,   1,  32,   30,    4,    "64GiB"],
[     1,     3,    75,   8,   4,   0,   0,   1,   1,  32,   30,    5,    "96GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,   10,   "192GiB"],
);

# sc17bi: similar to sc17b but with fixed 32 nodes and scaling cores per node
@sc17bi = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,   1,   30,    1,    "96GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,   2,   30,    2,   "192GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,   4,   30,    3,   "384GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,   8,   30,    4,   "768GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,  16,   30,    5,  "1536GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,  32,   30,   10,  "3072GiB"],
);

# sc17bj: similar to sc17b but with fixed 32 nodes and scaling px, py
@sc17bj = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[    32,     3,    75,  32,   1,   0,   0,   1,   1,  32,   30,    1,    "32GiB"],
[    32,     3,    75,  64,   1,   0,   0,   1,   1,  32,   30,    1,    "32GiB"],
[    32,     3,    75, 128,   1,   0,   0,   1,   1,  32,   30,    1,    "64GiB"],
[    32,     3,    75, 256,   1,   0,   0,   1,   1,  32,   30,    1,    "96GiB"],
[    32,     3,    75, 512,   1,   0,   0,   1,   1,  32,   30,    1,   "192GiB"],
[    32,     3,    75,   1,   4,   0,   0,   1,   1,  32,   30,    2,   "384GiB"],
[    32,     3,    75,   2,   4,   0,   0,   1,   1,  32,   30,    3,   "768GiB"],
[    32,     3,    75,   4,   4,   0,   0,   1,   1,  32,   30,    4,  "1536GiB"],
[    32,     3,    75,   8,   4,   0,   0,   1,   1,  32,   30,    5,  "3072GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,  32,   60,   10,  "5120GiB"],
);

# sc17br: similar to sc17b but with ppn reduced to 1
@sc17br = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,   1,   30,    1,    "32GiB"],
[     2,     3,    75,  16,   4,   0,   0,   1,   1,   1,   30,    2,    "32GiB"],
[     4,     3,    75,  16,   4,   0,   0,   1,   1,   1,   30,    3,    "32GiB"],
[     8,     3,    75,  16,   4,   0,   0,   1,   1,   1,   30,    4,    "32GiB"],
[    16,     3,    75,  16,   4,   0,   0,   1,   1,   1,   30,    5,    "64GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,   1,   30,   10,    "96GiB"],
);

# sc17bx: similar to sc17b but with a dedicated core per node for nic irq
@sc17bx = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  31,   10,    1,    "32GiB"],
[     1,     3,    75,  16,   4,   0,   0,   1,   1,  31,   30,    1,    "96GiB"],
[     2,     3,    75,  16,   4,   0,   0,   1,   1,  31,   30,    2,   "192GiB"],
[     4,     3,    75,  16,   4,   0,   0,   1,   1,  31,   30,    3,   "384GiB"],
[     8,     3,    75,  16,   4,   0,   0,   1,   1,  31,   30,    4,   "768GiB"],
[    16,     3,    75,  16,   4,   0,   0,   1,   1,  31,   30,    5,  "1536GiB"],
[    32,     3,    75,  16,   4,   0,   0,   1,   1,  31,   30,   10,  "3072GiB"],
);

# sc17c: for benchamrking the entire pipeline
@sc17c = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  32,   10,    1,    "32GiB"],
[    32,     4,   100,  16,   4,   0,   0,   1,   1,  32,   45,   10,  "5120GiB"],
[    64,     4,   100,  16,   4,   0,   0,   1,   1,  32,   60,   20, "10240GiB"],
[    96,     4,   100,  16,   4,   0,   0,   1,   1,  32,   75,   40, "15360GiB"],
);

# sc17cx: similar to sc17c but with a dedicated core per node for nic irq
@sc17cx = (
#         vpic   vpic                                      max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, time, xtra,    dwsize
[     1,     2,    50,   4,   2,   0,   0,   1,   1,  31,   10,    1,    "32GiB"],
[    33,     4,   100,  16,   4,   0,   0,   1,   1,  31,   45,   10,  "5120GiB"],
[    66,     4,   100,  16,   4,   0,   0,   1,   1,  31,   60,   20, "10240GiB"],
[    99,     4,   100,  16,   4,   0,   0,   1,   1,  31,   75,   40, "15360GiB"],
);

# table of contents (experiments available)
%TOC = (
    "carp8m"  => [ \@carp8m,  \&stdpost_2d ],
    "minimal" => [ \@minimal, \&stdpost_2d ],
    "dwtest"  => [ \@dwtest,  \&stdpost_2d ],
    "cs19a"   => [ \@cs19a,   \&stdpost_2d ],
    "cs19b"   => [ \@cs19b,   \&stdpost_2d ],
    "cs19c"   => [ \@cs19c,   \&stdpost_2d ],
    "cs19d"   => [ \@cs19d,   \&stdpost_2d ],
    "cs19e"   => [ \@cs19e,   \&stdpost_2d ],
    "cs19f"   => [ \@cs19f,   \&stdpost_2d ],
    "pd18a"   => [ \@pd18a,   \&stdpost_2d ],
    "pd18b"   => [ \@pd18b,   \&stdpost_2d ],
    "pd18c"   => [ \@pd18c,   \&stdpost_2d ],
    "pd18d"   => [ \@pd18d,   \&stdpost_2d ],
    "pd18e"   => [ \@pd18e,   \&stdpost_2d ],
    "pd18f"   => [ \@pd18f,   \&stdpost_2d ],
    "pd18h"   => [ \@pd18h,   \&stdpost_2d ],
    "pd18i"   => [ \@pd18i,   \&stdpost_2d ],
    "pd18j"   => [ \@pd18j,   \&stdpost_2d ],
    "pd18x"   => [ \@pd18x,   \&stdpost_2d ],
    "pd18y"   => [ \@pd18y,   \&stdpost_2d ],
    "sc17a"   => [ \@sc17a,   \&stdpost_2d ],
    "sc18a"   => [ \@sc18a,   \&stdpost_2d ],
    "sc18b"   => [ \@sc18b,   \&stdpost_2d ],
    "sc18c"   => [ \@sc18c,   \&stdpost_2d ],
    "sc18d"   => [ \@sc18d,   \&stdpost_2d ],
    "sc18e"   => [ \@sc18e,   \&stdpost_2d ],
    "sc18f"   => [ \@sc18f,   \&stdpost_2d ],
    "sc18k"   => [ \@sc18k,   \&stdpost_2d ],
    "sc18l"   => [ \@sc18l,   \&stdpost_2d ],
    "sc18r"   => [ \@sc18r,   \&stdpost_2d ],
    "sc18n"   => [ \@sc18n,   \&stdpost_2d ],
    "sc18s"   => [ \@sc18s,   \&stdpost_2d ],
    "sc18w"   => [ \@sc18w,   \&stdpost_2d ],
    "sc17b"   => [ \@sc17b,   \&stdpost_2d ],
    "sc17ba"  => [ \@sc17ba,  \&stdpost_2d ],
    "sc17bb"  => [ \@sc17bb,  \&stdpost_2d ],
    "sc17bi"  => [ \@sc17bi,  \&stdpost_2d ],
    "sc17bj"  => [ \@sc17bj,  \&stdpost_2d ],
    "sc17br"  => [ \@sc17br,  \&stdpost_2d ],
    "sc17bx"  => [ \@sc17bx,  \&stdpost_2d ],
    "sc17c"   => [ \@sc17c,   \&stdpost_2d ],
    "sc17cx"  => [ \@sc17cx,  \&stdpost_2d ],
    "fanrun"  => [ \@fanrun ],
    );

#
# define any post-processing functions here, this allows us to specify
# scaled values in the arrays above if we wish.  in that case, we use
# a post-processing function to expand the p{x,y,z}, t{x,y,z} values
# to their true values.   should return (px,py,pz,tx,ty,tz) array.
#

#
# stdpost(): standard post processor.  converts factor values in a row
# of the array to their real values...
# sets PX=10^px, PY=ncores*py, PZ=10^pz, TY=ncores.
# leaves TX and TZ as-is.
#
sub stdpost {
    my($rowref) = @_;
    die "stdpost: bad arg" unless (ref($rowref) eq 'ARRAY');
    my($ncores);
    my($nodes, $dumps, $steps,
       $px, $py, $pz, $tx, $ty, $tz, $ppn) = @$rowref;

    $ncores = $nodes * $ppn;
    $ty = $ncores;     # override the zero from the array
    $px = 10**$px;
    $py = $ncores * $py;
    $pz = 10**$pz;

    return($px,$py,$pz,$tx,$ty,$tz);
}

#
# stdpost_2d(): the 2d-version of the stdpost() defined above.
# sets PX=ncores*px, PY=10^py, PZ=1, TX=ncores.
# TY and TZ are unchanged (typically 1).
#
sub stdpost_2d {
   my($rowref) = @_;
    die "stdpost: bad arg" unless (ref($rowref) eq 'ARRAY');
    my($ncores);
    my($nodes, $dumps, $steps,
       $px, $py, $pz, $tx, $ty, $tz, $ppn) = @$rowref;

    $ncores = $nodes * $ppn;
    $tx = $ncores;     # override the zero from the array
    $px = $ncores * $px;
    $py = 10**$py;
    $pz = 1;

    return($px,$py,$pz,$tx,$ty,$tz);
}

##############################################################################
##############################################################################
##############################################################################
#
# code for generating exp scripts goes below here
#
use Fcntl;
use Getopt::Long qw(:config require_order);
use Sys::Hostname;
my($hostname) = hostname();   # put in var to allow us to override for debug

#
# helper functions
#

#
# hms(min,scale) - convert number of minutes to hh:mm:ss using scaling factor
#
sub hms {
    my($min, $sc) = @_;
    my($h, $m);
    $m = int($min * $sc);
    $m = 1 if ($m < 1);
    sprintf "%d:%02d:00", int($m / 60), $m % 60;
}

#
# guess_subnet: based on hostname
# XXX: there needs to be a better way to do this
#
sub guess_subnet {
    my($hn) = $hostname;
    return "11.128" if ($hn =~ /^tt-fey/);
    return "10.111" if ($hn =~ /narwhal/);
    return "10.53" if ($hn =~ /susitna/);
    return undef;
}

#
# guess_platform: based on what's in our path
#
sub guess_platform {
    my(@paths, $path);
    @paths = split(/:/, $ENV{'PATH'});
    foreach $path ( @paths ) {
        return("slurm") if (-x "$path/sbatch");
        if (-x "$path/qsub") {
            # cobalt overloads "qsub" ...
            $_ = `$path/qsub --version 2>&1 `;
            return("cobalt") if (/cobalt/i);
            return("moab");
        }
    }
    return("mpi");
}

#
# savefile(file, content1, content2,...): save data to a file.  return
# 1 on success, undef on error.
#
sub savefile {
    my($file) = shift(@_);
    my($hand);

    # must have a filename (if already present, must be a file).
    return(undef) if ($file eq '' || (-e $file && ! -f $file));

    # return 1 if total success!
    if (sysopen($hand, "$file.new.$$", O_RDWR|O_CREAT|O_TRUNC, 0777)  &&
        print($hand join('', @_))           &&
        close($hand)                        &&
        rename("$file.new.$$", $file) ) {
        return(1);
    }

    # failure
    undef($hand);                               # will close, if open
    unlink("$file.new.$$");
    return(undef);
}

my($cmd) = join(" ", @ARGV);
my($rv, $account, $addrunopts, $bbosbuddies, $constraints, $core_spec,
   $cpubind, $deckid, $dryrun, $dw, @envs, $experiment, $extraopts,
   $hostsuffix, $ipsubnet, $iterations, $loadfile, $overcommit, $queue,
   $partition, $platform, $postruncmd, $prefix, $run, $scaletime,
   $script, $skipreads, $tag, $tests);
my($defplatform);

# non-undef defaults
$bbosbuddies = 0;
$cpubind = 'none';
$deckid = 'trecon-part/turbulence';
$dw = 'off';
$hostsuffix = '';
$ipsubnet = guess_subnet();
$iterations = 1;
$prefix = '@CMAKE_INSTALL_PREFIX@';
$platform = $defplatform = guess_platform();   # save guess in defplatform
$scaletime = 1.0;
$script = "run_vpic_test.sh";
$skipreads = 0;
$tag = "vpic";
# TODO: support a baseline expt?
$tests = "carp";

$rv = GetOptions(
    "account=s"      =>  \$account,
    "addrunopts=s"   =>  \$addrunopts,
    "bbosbuddies=i"  =>  \$bbosbuddies,
    "constraints=s"  =>  \$constraints,
    "core-spec=i"    =>  \$core_spec,
    "cpubind=s"      =>  \$cpubind,
    "deckid=s"       =>  \$deckid,
    "dryrun"         =>  \$dryrun,
    "dw=s"           =>  \$dw,
    "env=s"          =>  \@envs,
    "experiment=s"   =>  \$experiment,
    "extraopts=s"    =>  \$extraopts,
    "hostname=s"     =>  \$hostname,
    "hostsuffix=s"   =>  \$hostsuffix,
    "ipsubnet=s"     =>  \$ipsubnet,
    "iterations=i"   =>  \$iterations,
    "loadfile=s"     =>  \$loadfile,
    "overcommit=s"   =>  \$overcommit,
    "queue=s"        =>  \$queue,
    "partition=s"    =>  \$partition,
    "platform=s"     =>  \$platform,
    "postruncmd=s"   =>  \$postruncmd,
    "prefix=s"       =>  \$prefix,
    "run=s"          =>  \$run,
    "scaletime=f"    =>  \$scaletime,
    "script=s"       =>  \$script,
    "skipreads"      =>  \$skipreads,
    "tag=s"          =>  \$tag,
    "tests=s"        =>  \$tests
    );

sub usage {
    my($msg) = @_;
    print STDERR "ERR: $msg\n" if ($msg ne '');
    print STDERR "usage: vpicexpt_gen [options] outputdir\n";
    print STDERR "\ngenerate experiment batch scripts in spec'd dir\n\n";
    print STDERR "general options:\n";
    print STDERR "\t--account S       account to charge (cobalt)\n";
    print STDERR "\t--addrunopts S    additional mpirun opts (beyond extra)\n";
    print STDERR "\t--bbosbuddies I   #of bbos buddy nodes to use\n";
    print STDERR "\t--constraints S   workload mgr constraints (haswell)\n";
    print STDERR "\t--core-spec I     specialized core cnt (slurm only)\n";
    print STDERR "\t--cpubind S       binding (none, core, thread, external)\n";
    print STDERR "\t--deckid S        vpic deck id (in decks directory)\n";
    print STDERR "\t--dryrun          just print run info and exit\n";
    print STDERR "\t--dw state        datawarp state (off, bw, int)\n";
    print STDERR "\t--env E=val       setenv 'E' to 'val' in script\n";
    print STDERR "\t--experiment S    experiment to run\n";
    print STDERR "\t--hostsuffix S    hostname suffix (emulab)\n";
    print STDERR "\t--ipsubnet S      IP subnet to target\n";
    print STDERR "\t--iterations I    #of iterations for each run\n";
    print STDERR "\t--loadfile S      load external expts from this file\n";
    print STDERR "\t--overcommit S    overcommit (enable/disable/default)\n";
    print STDERR "\t--queue S         job queue to use (cobalt)\n";
    print STDERR "\t--partition S     slurm partition (slurm only)\n";
    print STDERR "\t--postruncmd S    cmd to postprocess output dir\n";
    print STDERR "\t--run S           limit which run to generate\n";
    print STDERR "\t--scaletime F     run time limit scaling\n";
    print STDERR "\t--script S        vpic run script (run_vpic_test.sh)\n";
    print STDERR "\t--skipreads       skip read phase\n";
    print STDERR "\t--tag S           string to tag exp logfile names with\n";
    print STDERR "\t--tests S         baseline, deltafs, ...\n";
    print STDERR "\n";
    print STDERR "Note\n\n";
    print STDERR "* --experiment must be specified.  valid options are:\n";
    print STDERR "\t", join(' ', sort keys %TOC), "\n";
    print STDERR "* --run and --tests options will take a list of values\n";
    print STDERR "using a comma to sep (e.g. '--tests=baseline,deltafs').\n";
    print STDERR "* --constraints, --partition, and --dw is only supported\n";
    print STDERR "on the cray platform with slurm/moab.\n";
    print STDERR "* --cpubind default binding is 'none'\n";
    print STDERR "dw state: 'bw' = bandwidth, 'int' = inteference\n";
    print STDERR "bw=spread on all dw nodes, int=avoid interference\n";
    print STDERR "* --core-spec is only supported on slurm\n";
    print STDERR "* --overcommit is only supported on LANL's slurm install\n";
    print STDERR "* --adddrunopts inserts MPI options in addition to 'extraopts'\n";
    print STDERR "\n";
    print STDERR "debug/testing options:\n";
    print STDERR "\t--extraopts S     extra platform run flags\n";
    print STDERR "\t--hostname S      override local hostname\n";
    print STDERR "\t--platform S      platform to use\n";
    print STDERR "\t--prefix S        deltafs-umbrella install prefix\n";
    print STDERR "\n";
    print STDERR "these options are normally autoset by this script\n";
    print STDERR "but can be overriden if needed...\n";
    exit(1);
}

#
# sanity checking
#
my($exprow, $exp, $postfun, @rns, %wantrun, $prun_on);
my(@ekeys, @cleanenv);
my(@opts, %opts_skipgen, @fmtbuf, $vpicgen_fmtopts);
my($fullextra, $EXPPARAMS_regex);

#
# allow external experiments for debugging/testing.  we want the
# important ones (e.g. for papers) embedded in the script for safekeeping.
#
if ($loadfile ne '') {
    die "missing loadfile $loadfile" unless (-f $loadfile);
    $_ = `cat $loadfile`;
    $_ = eval $_;
    if (!defined($_)) {
        print "$@" if ($@);
        print "couldn't load $loadfile\n";
        exit(1);
    }
}

$exprow = $TOC{$experiment};

usage() if ($rv != 1);
usage("missing output dir") if ($#ARGV != 0);
usage("bbosbuddies must be >= 0") if ($bbosbuddies < 0);
usage("--core-spec only on slurm platform")
    if ($platform ne 'slurm' && defined($core_spec));
usage("bad --cpubind value - use none, core, thread, or external")
    if ($cpubind ne 'none' && $cpubind ne 'core' && $cpubind ne 'thread' &&
        $cpubind ne 'external');
usage("--partition only on slurm platform")
    if ($platform ne 'slurm' && defined($partition));
usage("dw must be 'off', 'bw'  or  'int'")
    if ($dw ne 'off' && $dw ne 'bw' && $dw ne 'int');
usage("bad deck id, must be in format deckdir/namename")
    unless ($deckid =~ /([^\/]*)\/([^\/]*)/ && $1 ne '' && $2 ne '');
usage("need a valid --experiment value") unless (defined($exprow));
usage("invalid experiment array?!?") if (ref($exprow) ne 'ARRAY');
usage("bad number of interations") if ($iterations < 1);

($exp, $postfun) = @$exprow;
@rns = split(",", $run);
foreach (@rns) {
    usage("bad run value: $_") if (/\D/ || $_ < 0);
    usage("run out of range $_ for $experiment") if ($_ > $#$exp);
    $wantrun{$_} = 1;

}
usage("bad overcommit value") if ($overcommit ne '' &&
  $overcommit ne 'enable' && $overcommit ne 'disable' &&
  $overcommit ne 'default');
usage("overcommit only valid for slurm")
  if ($platform ne 'slurm' && $overcommit ne '');

$prun_on = 0;
$postruncmd =~ s/^\s+//;        # make sure no leading spaces
if ($postruncmd ne '') {
  my($prun, @pth, $found, $dir);
  $prun = $postruncmd;
  $prun =~ s/\s.*//;
  if (substr($prun, 0, 1) eq "/") {
    usage("can't find $prun script") unless (-x $prun);
  } else {
    @pth = split(/:/, $ENV{'PATH'});
    foreach $dir (@pth) {
      $found = 1 if (-x "$dir/$prun");
      last if ($found);
    }
    if (!$found && -x "$prefix/scripts/$prun") {    # last ditch, script dir
      $found++;
      $postruncmd = "$prefix/scripts/$postruncmd";
    }
    usage("can't find $prun script anywhere") unless ($found);
  }
  $postruncmd = "$postruncmd \$jobdir";   # append dir as arb
  $prun_on = 1;
}

usage("bad scale time") if ($scaletime <= 0.0);
usage("bad tests $tests") if ($tests ne "baseline" && $tests ne "carp" &&
                              $tests ne "baseline,carp" &&
                              $tests ne "carp,baseline");
foreach (@envs) {
  usage("bad env var $_") unless (/^(\w+)=(.*)/);
  usage("use --addrunopts and --extraopts to set EXTRA_MPIOPTS")
    if ($1 eq 'EXTRA_MPIOPTS');
  push(@ekeys, $1);
  if (index($2, " ") >= 0 || index($2, "\t") >= 0) {
    push(@cleanenv, sprintf('%s="%s"', $1, $2));
  } else {
    push(@cleanenv, "$1=$2");
  }
}

#
# print back options
#
@opts = (
    "account"     => $account,
    "adddrunopts" => $addrunopts,
    "bbosbuddies" => $bbosbuddies,
    "constraints" => $constraints,
    "core-spec"   => $core_spec,
    "cpubind"     => $cpubind,
    "deckid"      => $deckid,
    "dw"          => $dw,
    "env"         => join(" ", @ekeys),
    "experiment"  => $experiment,
    "hostsuffix"  => $hostsuffix,
    "ipsubnet"    => $ipsubnet,
    "iterations"  => $iterations,
    "loadfile"    => $loadfile,
    "overcommit"  => $overcommit,
    "queue"       => $queue,
    "partition"   => $partition,
    "postruncmd"  => $postruncmd,
    "run"         => $run,
    "scaletime"   => $scaletime,
    "script"      => $script,
    "skipreads"   => $skipreads,
    "tag"         => $tag,
    "tests"       => $tests,
    ""            => undef,
    "hostname"    => $hostname,
    "extraopts"   => $extraopts,
    "platform"    => $platform,
    "prefix"      => $prefix,
    "output-dir"  => $ARGV[0]);

# don't put these in VPICGENOPTS, since they are in EXPPARAMS because
# they are CLI args to the script (don't need duplicate value)
%opts_skipgen = ( "bbosbuddies" => 1, "cpubind" => 1, "deckid" => 1,
                  "hostsuffix" => 1, "ipsubnet" => 1, "skipreads" => 1);

print "vpicexpt_gen settings:\n";
for ($_ = 0 ; $_ <= $#opts ; $_ += 2) {
    if ($opts[$_] ne '') {
        printf "\t%-12s = %s\n", $opts[$_], $opts[$_+1];
        push(@fmtbuf, $opts[$_] . "=" . $opts[$_+1])
            unless($opts_skipgen{$opts[$_]});
    } else {
        print "\n";
    }
}
# also push each env var as its own line for ease of parsing
foreach (@envs) {
  push(@fmtbuf, $_);
}
$vpicgen_fmtopts = join("\n", @fmtbuf);

# we fold overcomit into extraopts to form "fullextra"...
$fullextra = "--vm-overcommit=$overcommit" if ($overcommit ne '');
if ($extraopts ne '') {
  $fullextra = $fullextra . " " if ($fullextra ne '');
  $fullextra = $fullextra . $extraopts;
}
if ($addrunopts ne '') {
  $fullextra = $fullextra . " " if ($fullextra ne '');
  $fullextra = $fullextra . $addrunopts;
}

#
# regular expression to use to build EXPPARAMS
#
$EXPPARAMS_regex = '^test=|^hostsuffix=|^ipsubnet=|^nodes=|^ppn=|^vpicdumps=|' .
                   '^cpubind=|^vpicsteps=|^px=|^py=|^pz=|^tx=|^ty=|^tz=|' .
                   '^pvtcnt=|^intvl=|^deckid=|' .
                   '^bbosbuddies=|^skipreads=|^maxtime=|^basextra=|^dwsize=';

#
# create output directory if it isn't present
#
if (!$dryrun && ! -d $ARGV[0]) {
    mkdir $ARGV[0] || die "mkdir of $ARGV[0] failed ($!)";
}

#
# now start generating batch files
#
#         vpic   vpic                                                     max  base
# nodes, dumps, steps,  px,  py,  pz,  tx,  ty,  tz, ppn, pvtcnt, intvl, time, xtra, dwsize
if ($dryrun) {
    print "r# nodes dumps steps    px    py    pz " .
          "   tx    ty    tz ppn pvtcnt  intvl  time xtra dwsize\n";
}
for (my($r) = 0 ; $r <= $#$exp ; $r++) {
    next if ($run ne '' && $wantrun{$r} == 0);
    my($nodes, $vpicdumps, $vpicsteps, $fpx, $fpy, $fpz, $ftx, $fty, $ftz,
       $ppn, $pvtcnt, $intvl, $maxtime, $basextra, $dwsize) = @{$$exp[$r]};
    my($px, $py, $pz, $tx, $ty, $tz);

    # allow user function to post process a row...
    if (ref($postfun) eq 'CODE') {
        ($px, $py, $pz, $tx, $ty, $tz) = &$postfun($$exp[$r]);
    } else {
        # no function, pass the values directly thru!!
        ($px, $py, $pz, $tx, $ty, $tz) = ($fpx, $fpy, $fpz, $ftx, $fty, $ftz);
    }

    # $nodes is just the vpic app, need to allocate for bbos too
    my($totalnodes) = $nodes + $bbosbuddies;
    if ($dw ne 'off' || $dryrun) {
        usage("dwsize in exp array r=$r must end in 'ib' (GiB, etc.)")
            unless ($dwsize =~ /\d+.ib$/i);
    }
    if ($dryrun) {
        printf "%2d %5d %5d %5d %5d %5d %5d %5d %5d %5d %3d %3d %10d %4d %4d %s\n",
        $r, $nodes, $vpicdumps, $vpicsteps, $px, $py, $pz, $tx, $ty, $tz,
        $ppn, $pvtcnt, $intvl, $maxtime, $basextra, $dwsize;
        next;
    }

    my($dwl, $t, $fn, @out, $rtime, $batchfile);
    if ($dw ne 'off') {
        $dwl = "#DW jobdw access_mode=striped capacity=$dwsize type=scratch";
        $dwl = "$dwl optimization_strategy=interference" if ($dw eq 'int');
    }
    foreach $t ("baseline", "carp") {
        next unless (index($tests, $t) != -1);
        $fn = "$ARGV[0]/$tag-$experiment-$r-$t.sh";
        @out = ();
        if ($t eq "baseline") {
            $rtime = hms(($maxtime + $basextra) * $iterations, $scaletime);
        } else {
            $rtime = hms($maxtime * $iterations, $scaletime);
        }
        push(@out, "#!/bin/bash");
        if ($platform eq 'slurm') {
            push(@out, "#SBATCH --job-name $tag-$experiment-$r-$t");
            push(@out, "#SBATCH --time=$rtime");
            push(@out, "#SBATCH --nodes=$totalnodes");
            push(@out, "#SBATCH --constraint=$constraints")
                if ($constraints ne '');
            push(@out, "#SBATCH --core-spec=$core_spec")
                if ($core_spec > 0);
            push(@out, "#SBATCH --output " .
                 "/users/\%u/joblogs/$tag-$experiment-$r-$t-\%j.out");
            push(@out, "#SBATCH --partition=$partition")
                if ($partition ne "");
            push(@out, "$dwl") if ($dwl ne '');
            # XXX: lanl docs say to do this, but we aren't using OMP
            push(@out, "");
            push(@out, "export OMP_NUM_THREADS=1");
        } elsif ($platform eq 'moab') {
            push(@out, "#MSUB -N $tag-$experiment-$r-$t");
            push(@out, "#MSUB -l walltime=$rtime");
            if ($constraints eq '') {
                push(@out, "#MSUB -l nodes=$totalnodes");
            }else {
                push(@out, "#MSUB -l nodes=$totalnodes:$constraints");
            }
            push(@out, "#MSUB -o /users/" .
                 "\$USER/joblogs/$tag-$experiment-$r-$t-\$MOAB_JOBID.out");
            push(@out, "#MSUB -j oe");
            push(@out, "$dwl") if ($dwl ne '');
            push(@out, "");
        } elsif ($platform eq 'cobalt') {
            push(@out, "#COBALT --jobname $tag-$experiment-$r-$t");
            push(@out, "#COBALT -t $rtime");
            push(@out, "#COBALT -n $totalnodes");
            push(@out, "#COBALT --mode script");
            push(@out, "#COBALT --output " . $ENV{'HOME'} .
                       "/joblogs/$tag-$experiment-$r-$t-\$COBALT_JOBID.out");
            push(@out, "#COBALT --error " . $ENV{'HOME'} .
                       "/joblogs/$tag-$experiment-$r-$t-\$COBALT_JOBID.out");
            push(@out, "#COBALT --debuglog " . $ENV{'HOME'} .
                       "/joblogs/$tag-$experiment-$r-$t-\$COBALT_JOBID.clog");
            push(@out, "#COBALT -A $account") if ($account ne '');
            push(@out, "#COBALT -q $queue") if ($queue ne '');
            push(@out, "");
            push(@out, "# XXX: cobalt missing feature: jobname env var");
            push(@out, "# XXX: fake jobname env var on behalf of cobalt");
            push(@out, "export COBALT_XJOBNAME=\"$tag-$experiment-$r-$t\"");
            push(@out, "");
        } else {
            push(@out, "# $tag-$experiment-$r-$t - not using batch system");
            push(@out, "export MPIJOBNAME=\"$tag-$experiment-$r-$t\"");
            push(@out, "export MPIJOBID=\$\$");
            if ($dwl ne '') {
                print STDERR "WARN: can't enable data warp on this platform\n";
                push(@out, "# WARN: can't enable data warp on this platform");
            }
        }
        push(@out, "#");
        push(@out, "# this script generated by vpicexpt_gen");
        push(@out, "# args=$cmd");
        push(@out, "");
        push(@out, "", "export EXTRA_MPIOPTS=\"$fullextra\"", "")
            if ($fullextra ne '');
        push(@out, "# user defined env vars") if ($#envs >= 0);
        foreach (@cleanenv) {
            push(@out, "export $_");
        }
        push(@out, "") if ($#envs >= 0);
        if ($dwl ne '') {
            push(@out, "module load dws");
            push(@out, "echo DataWarp Enabled, Config is:");
            push(@out, "dwstat sessions instances fragments");
            push(@out, "echo ''");
            push(@out, "");
        }
        $batchfile =<<"EOS";

#######################
# experiment params
#######################
#
# flags to $script
#
test=$t
cpubind=$cpubind
hostsuffix=$hostsuffix
ipsubnet=$ipsubnet
nodes=$nodes
ppn=$ppn
vpicdumps=$vpicdumps
vpicsteps=$vpicsteps
px=$px
py=$py
pz=$pz
tx=$tx
ty=$ty
tz=$tz
pvtcnt=$pvtcnt
intvl=$intvl
deckid=$deckid
bbosbuddies=$bbosbuddies
skipreads=$skipreads
#
# other info that might be useful
#
maxtime=$maxtime
basextra=$basextra
dwsize=$dwsize
#######################

#
# workaround a bash bug where "I-0" matches "[a-z]*" when LANG is set
# (only impacts some versions of bash)
#
unset LANG

#
# load in common.sh so we can get the jobdir for handling iterations
#
. $prefix/scripts/common.sh

get_jobdir      # this sets jobdir

#
# save vpicgenopts to a file.  vpicgenopts contains all command line flags
# to vpicexpt_gen.pl except for the ones that are also command line flags to
# $script (those end up in expparams instead).
#
cat<<ENDOPTS > \$jobdir/VPICGENOPTS
jobdir=\$jobdir
$vpicgen_fmtopts
ENDOPTS

#
# save experiment params to a file.  this includes all command line
# flags for the script, plus additional values from the expt
# table selected with --experiment
#
set | egrep '$EXPPARAMS_regex' > \$jobdir/EXPPARAMS

#
# echo back config to the job log
#
echo ''
echo VPICGENOPTS contains:
cat \$jobdir/VPICGENOPTS
echo end of VPICGENOPTS
echo ''
echo EXPPARAMS contains:
cat \$jobdir/EXPPARAMS
echo end of EXPPARAMS
echo ''

#
# loop through iterations...
#
it=0
while [ \$it -lt $iterations ]
do
    echo running iteration \$it
    # XXX: should reset logfile name here
    $prefix/scripts/$script test_type=\$test \\
        host_suffix="\$hostsuffix" \\
        ip_subnet="\$ipsubnet" nodes=\$nodes cpubind=\$cpubind \\
        procs_per_node=\$ppn num_vpic_dumps=\$vpicdumps \\
        num_vpic_steps=\$vpicsteps px=\$px py=\$py pz=\$pz \\
        tx=\$tx ty=\$ty tz=\$tz pvtcnt=\$pvtcnt intvl=\$intvl deckid=\$deckid \\
        bbos_buddies=\$bbosbuddies \\
        should_skip_query=\$skipreads

    if [ $prun_on != 0 ]; then
      echo running postrun command
      $postruncmd
    fi
    echo saving iteration in \$jobdir/I-\$it
    mkdir -p \$jobdir/I-\$it
    mv \$jobdir/[a-z]* \$jobdir/I-\$it

    it=`expr \$it + 1`
done

EOS

        die "savefile failed!"
            unless (savefile($fn, join("\n", @out), $batchfile,
                             "\n", "exit 0\n"));
        print "generated $fn\n";
    }
}


exit(0);
