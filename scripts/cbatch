#!/usr/bin/env perl

#
# Copyright (c) 2019 Carnegie Mellon University,
# Copyright (c) 2019 Triad National Security, LLC, as operator of
#     Los Alamos National Laboratory.
#
# All rights reserved.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file. See the AUTHORS file for names of contributors.
#

#
# cbatch  submit batch job script to cobalt (cobalt qsub wrapper)
# 20-Feb-2019  chuck@ece.cmu.edu
#

#
# this expands env vars in #COBALT lines, so you can do:
#  #COBALT --output %HOME%/joblogs/foo.log
# the expanded version of the batch file is saved in $CBATCHDIR
# (default CBATCHDIR is $HOME/tmp) and removed when the job completes
#

use strict;
use Cwd;
use POSIX;

#
# expand_env(line): expand environment variables in a line
#
sub expand_env {
    my($l) = @_;
    my($repl);
    while ($l =~ /%(\w+)%/) {
        $repl = $ENV{$1};
        die "error: $1 - recursive replacement not supported"
            if ($repl =~ /%\w+%/);
        $l =~ s/\%$1%/$repl/;
    }
    return($l);
}

#
# savefile(file, joinstr, content1, content2,...): save data to a file.
# return 1 on success, undef on error.
#
sub savefile {
    my($file) = shift(@_);
    my($joinstr) = shift(@_);
    my($hand);

    # must have a filename (if already present, must be a file).
    return(undef) if ($file eq '' || (-e $file && ! -f $file));

    # return 1 if total success!
    if (open($hand, ">$file.new.$$")        &&
        print($hand join($joinstr, @_))     &&
        close($hand)                        &&
        rename("$file.new.$$", $file) ) {
        return(1);
    }

    # failure
    undef($hand);                               # will close, if open
    unlink("$file.new.$$");
    return(undef);
}


#
# main script
#
my($script, $argstring, @sdata, $line, $stopexpand, $stopline);
my($cbatchdir, $cwd, $jobdirhome);
my($base, @lt, $tag, $wrapper, $wrapped, @wrap, @cmd);

#
# sanity check args and ensure we are getting a script file.  we do
# not expect any args to the script file itself on the command line
# (better to embed that in the script so there is a record of them).
#
die "usage: cbatch [qsub-args] batch-file" if ($#ARGV < 0);
$script = pop(@ARGV);
$argstring = join(" ", @ARGV);
die "error: $script is not a executable file"
    unless (-f $script && -x $script);
open(SCRIPT, "$script") || die "Cannot open $script - $!";
die "error: script $script does not start with #!"
    if (sysread(SCRIPT, $_, 2) != 2 || $_ ne "#!");
close(SCRIPT);

#
# check for CBATCHDIR and JOBDIRHOME.   JOBDIRHOME is used by our scripts
# to point to a scratch parallel filesystem that we can write our output
# results to.   we typically keep the job logs themselves in $HOME
# (which can be a normal fileserver... e.g. a netapp NAS box).
#
$cbatchdir = (defined($ENV{'CBATCHDIR'})) ? $ENV{'CBATCHDIR'} :
             $ENV{'HOME'} . "/tmp";
die "error: create missing CBATCHDIR - $cbatchdir" unless (-d $cbatchdir);
$cwd = cwd();
$jobdirhome = (defined($ENV{'JOBDIRHOME'})) ? $ENV{'JOBDIRHOME'} :
             $ENV{'HOME'} . "/jobdirhome";
die "error: create missing JOBDIRHOME - $jobdirhome" unless (-d $jobdirhome);

#
# determine filenames in CBATCHDIR we are going to save our scripts under
#
$base = $script;
$base =~ s@.*/@@;
@lt = localtime();
$tag = sprintf("%02d%02d%02d-%02d%02d-%d", $lt[5]-100, $lt[4]+1, $lt[3],
                $lt[2], $lt[1], getpid());
$wrapper = "$cbatchdir/$base.$tag.wrap";
$wrapped = "$cbatchdir/$base.$tag.main";

#
# load in the script and expand the env and keep track of cobalt metadata
# so we can build the wrapper script.
#
open(SCRIPT, "$script") || die "Cannot open $script - $!";
while (<SCRIPT>) {
    $line++;
    if ($line == 1) {            # the #! line is special
        push(@sdata, $_);
        next;
    }
    if (!$stopexpand && ! /^#COBALT/) {
        $stopexpand = 1;
        $stopline = $line - 1;
    }
    $_ = expand_env($_) unless ($stopexpand);
    push(@sdata, $_);
}
close(SCRIPT);

#
# build wrapper script
#
push(@wrap, "#!/bin/sh\n");
for ($line = 1 ; $line < $stopline ; $line++) {
    push(@wrap, $sdata[$line]);
}
push(@wrap, "\n");
push(@wrap, "export JOBDIRHOME=$jobdirhome\n");
# XXX: MPICH_GNI_NDREG_ENTRIES required for GNI on cray
# allow user to override with qsub --env
push(@wrap, "export MPICH_GNI_NDREG_ENTRIES=1024\n")
    unless ($argstring =~ /MPICH_GNI_NDREG_ENTRIES/);
push(@wrap, "cd $cwd || exit 1\n");
push(@wrap, "\n");
push(@wrap, "$wrapped\n");
push(@wrap, "exitval=\$?\n");
push(@wrap, "rm $wrapped\n");
push(@wrap, "rm $wrapper\n");
push(@wrap, "exit \$exitval\n");

#
# now we are ready to do it...
#
if (!savefile($wrapper, '', @wrap) || !savefile($wrapped, '' ,@sdata) ||
    chmod(0777 & ~umask(), $wrapper, $wrapped) != 2) {
    print "error: failed to write wrapper scripts\n";
    goto error;
}

@cmd = ("qsub", @ARGV, $wrapper);
print "running: ", join(" ", @cmd), "\n";
$_ = system(@cmd);
if ($_ != 0) {
    print "qsub failed ($_)\n";
    goto error;
}

exit(0);


error:
unlink($wrapper);
unlink($wrapped);
exit(1);
