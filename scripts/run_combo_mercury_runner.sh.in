#!/bin/bash

#
# Copyright (c) 2019 Carnegie Mellon University,
# Copyright (c) 2019 Triad National Security, LLC, as operator of
#     Los Alamos National Laboratory.
#
# All rights reserved.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file. See the AUTHORS file for names of contributors.
#

#
# run_combo_mercury_runner.sh.in  local/remote mercury_runner tests
# 12-Jan-2018  chuck@ece.cmu.edu
#
# this is a revised version of run_mercury_runner.sh and
# and run_local_mercury_runner.sh (combines the two).  also
# takes params from environment
#

set -euo pipefail

####################
# Input parameters #
####################
# 10.111=narwhal, 10.53=susitna_fge, 11.128=trinitite
# default is to use "hostname -i" ip
subnet=${1:-""}

# mode (one way or two way)
if [ ${MR_TWOWAY:-"0"} = "0" ]; then
  nb_mode="s"          # unidirectional
else
  nb_mode="cs"         # bidirectional (but we only report 1 direction)
fi

# pollspin
if [ ${MR_POLLSPIN:-"0"} = "0" ]; then
  nb_pollspin="0"      # do not poll/spin
else
  nb_pollspin="1"      # yes, poll/spin!
fi

# cpubind
nb_cpubind=${MR_CPUBIND:-"none"}

# extra mpirun opts
nb_extraopts=${MR_EXTRAOPTS:-""}

# "n" - normal send run: RPC, vary request size and limit
n_protos=(${MR_NPROTOS:-bmi+tcp})             # protocols to test
n_sizes=(${MR_NSIZES:-64 1024 4096 32768 65536}) # RPC snd size ("-i" flag)
n_limits=(${MR_NLIMITS:-1 2 4 8 16})          # outstanding RPCs ("-l" flag)
n_repeats=${MR_NREPEATS:-2}                   # repeat runs
n_nrpcs=${MR_NRPCS:-100000}                   # nrpcs in 1 run ("-c" flag)
n_timeout=${MR_NTIMEOUT:-120}                 # timeout  ("-t" flag)
n_clistatus=${MR_NCLISTATUS:-0}               # client status ("-D" flag)

# "b" - bulk read run: RPC, vary bulk read size and limit
b_protos=(${MR_BPROTOS:-bmi+tcp})             # protocols to test
b_Sizes=(${MR_BSIZES:-2m})                    # bulk sizes ("-S" flag)
b_limits=(${MR_BLIMITS:-1 2})                 # outstanding RPCs ("-l" flag)
b_repeats=${MR_BREPEATS:-2}                   # repeat runs
b_nrpcs=${MR_BRPCS:-10000}                    # nrpcs in 1 run ("-c" flag)
b_timeout=${MR_BTIMEOUT:-300}                 # timeout  ("-t" flag)
b_clistatus=${MR_BCLISTATUS:-0}               # client status ("-D" flag)

dryrun=0                                        # set to 1 for script debug

instances=(1)                                   # currently not changing this

###############
# Core script #
###############
source @CMAKE_INSTALL_PREFIX@/scripts/common.sh

message "Script begin..."
# keep track of start time so we can see how long this takes
timein=`date`

get_jobdir
gen_hostfile

runner="${dfsu_prefix}/bin/mercury-runner"

message ">>> Output is available in $jobdir"

if [ ${num_all_nodes} = 1 -o ${MR_LOCAL:-0} != 0 ]; then
    message ">>> RUN TYPE = local"
    islocal=1
else
    message ">>> RUN TYPE = network"
    islocal=0
fi

#
# get IP addresses for the endpoints.  if we were not given a subnet,
# then we just use "hostname -i" ... if we have a subnet, then we use
# "ifconfig -a" to get a list of IPs and use $subnet to filter.  we
# used to use "hostname -I" but Cray's hostname is too old and does not
# support the "-I" flag...
#
host1=$(echo "$all_nodes" | sort | head -n 1)
if [ -z "$subnet" ]; then
    do_mpirun 1 1 "none" "" $host1 "hostname -i" "" \
        $logfile $jobdir/host1-ips.txt
    host1_ip=$(head -1 $jobdir/host1-ips.txt)
else
    do_mpirun 1 1 "none" "" $host1 "ifconfig -a" "" \
        $logfile $jobdir/host1-ifc.txt
    # XXX: ifconfig output varies between linux versions
    host1_ip=$(egrep '^ +inet ' $jobdir/host1-ifc.txt | \
                   sed -e 's/inet addr:/inet /' | \
                   sed -n -e 's/.*inet \([0-9.]\+\).*/\1/p' | \
                   fgrep $subnet | head -1 || true)
    if [ -z "$host1_ip" ]; then die "wrong subnet"; fi
fi

if [ $islocal = 0 ]; then
    host2=$(echo "$all_nodes" | sort | head -n 2 | tail -n 1)
    if [ -z "$subnet" ]; then
        do_mpirun 1 1 "none" "" $host2 "hostname -i" "" \
            $logfile $jobdir/host2-ips.txt
        host2_ip=$(head -1 $jobdir/host2-ips.txt)
    else
        do_mpirun 1 1 "none" "" $host2 "ifconfig -a" "" \
            $logfile $jobdir/host2-ifc.txt
        # XXX: ifconfig output varies between linux versions
        host2_ip=$(egrep '^ +inet ' $jobdir/host2-ifc.txt | \
                       sed -e 's/inet addr:/inet /' | \
                       sed -n -e 's/.*inet \([0-9.]\+\).*/\1/p' | \
                       fgrep $subnet | head -1 || true)
        if [ -z "$host2_ip" ]; then die "wrong subnet"; fi
    fi
fi

message ">>> Host 1: hostname = $host1, ip = $host1_ip"
if [ $islocal = 0 ]; then
    message ">>> Host 2: hostname = $host2, ip = $host2_ip"
fi

#
# run_one: run one instance
#
# uses: jobdir, host1, host2, host1_ip, host2_ip, dryrun
# Arguments:
# @1 protocol to use
# @2 number of mercury instances
# @3 req size ("-s")
# @4 bulk send size ("-S")
# @5 outstanding RPC limit ("-l")
# @6 current current iteration number
# @7 number of rpcs ("-c")
# @8 number repeats we target
# @9 timeout
run_one() {
    proto="$1"
    num="$2"
    reqsz=$3
    bulksz=$4
    limit=$5
    iter=$6
    nrpcs=$7
    repeats=$8
    timeo=$9

    now=`date`

    message ""
    message "====================================================="
    message "Starting new test at: ${now}"
    message "Testing protocol '$proto' with $num Mercury instances"
    message "reqsz=${reqsz:-'n/a'}, bulksz=${bulksz:-'n/a'}, limit=$limit, nrpcs=$nrpcs"
    message "Iteration $iter out of $repeats, mode ${nb_mode}, poll ${nb_pollspin}, cpubind ${nb_cpubind}"
    message "====================================================="
    message ""

    saddress="$proto"
    caddress="$proto"
    cmd="$runner -g"
    if [ "$proto" = "bmi+tcp" ]; then
        # XXX: ugh.  "-g" won't work for bmi+tcp na if MR_TWOWAY isn't set.
        # XXX: error: "Cannot convert addr to string if not listening"
        # XXX: since we have all the addressing info on cmd line, we
        # XXX: hack around this by switching off "-g" for bmi+tcp...
        message "NOTE: HACK: removing '-g' for bmi+tcp..."
        cmd="$runner"
    fi
    if [ "$islocal" = 1 ]; then
        if [ "$proto" = "bmi+tcp" ]; then
            # XXX: avoids port warning error from bmi+tcp by fixing ports
            # XXX: note: bmi+tcp can only run 1 instance, so fix is ok
            message "NOTE: applying local bmi+tcp HACK..."
            saddress="${proto}://${host1_ip}:22222"
            caddress="${proto}://${host1_ip}:22223"
        fi
        if [ "$proto" = "cci+tcp" -o "$proto" = "ofi+tcp" ]; then
            # we add IPs for IP subnet selection...  0 is the wildcard port.
            saddress="${proto}://${host1_ip}:0"
            caddress="${proto}://${host1_ip}:0"
        fi
    else
        if [ "$proto" = "bmi+tcp" -o "$proto" = "cci+tcp" \
                                  -o "$proto" = "ofi+tcp" ]; then
            # add IPs for subnet selection
            saddress="${proto}://${host1_ip}:%d"
            caddress="${proto}://${host2_ip}:%d"
        fi
    fi

    # generate log file names (maybe they should be passed in?)
    if [ ! -d $jobdir/$proto ]; then
        mkdir -p $jobdir/$proto
    fi
    if [ x$bulksz != x ]; then
        clogfile=$jobdir/$proto/bcli-$proto-$num-$bulksz-$limit-$iter-log.txt
        slogfile=$jobdir/$proto/bsrv-$proto-$num-$bulksz-$limit-$iter-log.txt
    else
        clogfile=$jobdir/$proto/ncli-$proto-$num-$reqsz-$limit-$iter-log.txt
        slogfile=$jobdir/$proto/nsrv-$proto-$num-$reqsz-$limit-$iter-log.txt
    fi
    # build command line
    # use slogfile for log; we'll move .0/.1 at the end
    cmd="$cmd -c ${nrpcs} -l $limit -M -q -r $iter -s $slogfile -t ${timeo}"
    if [ x$bulksz != x ]; then
        cmd="$cmd -S $bulksz -L $bulksz"
    fi
    if [ x$reqsz != x ]; then
        cmd="$cmd -i $reqsz"
    fi
    if [ "${nb_pollspin}" != 0 ]; then
        cmd="$cmd -P"
    fi
    if [ x$bulksz != x ]; then
        if [ "${b_clistatus}" != "0" ]; then
            cmd="$cmd -D ${b_clistatus}"
        fi
    else
        if [ "${n_clistatus}" != "0" ]; then
            cmd="$cmd -D ${n_clistatus}"
        fi
    fi

    the_cmd="$cmd -m ${nb_mode} $num $saddress $caddress"
    # start the run
    message "!!! NOTICE !!! starting run (Instances: $num, Address spec: $saddress/$caddress)..."
    if [ $dryrun = 1 ]; then
        message "DRYRUN CMD = $the_cmd"
    else
        if [ $islocal = 1 ]; then
            do_mpirun 2 2 "$nb_cpubind" "" "$host1,$host1" "$the_cmd" \
              "$nb_extraopts" "$logfile" || \
              message "!!! NOTICE !!! app exited with error code"
        else
            do_mpirun 2 1 "$nb_cpubind" "" "$host1,$host2" "$the_cmd" \
              "$nb_extraopts" "$logfile" || \
              message "!!! NOTICE !!! app exited with error code"
        fi
    fi

    sleep 0.1

    # Collect return codes
    if [ x$dryrun != x ]; then
        the_ret=0      # fake return values
    else
        the_ret=$?
    fi

    if [[ $the_ret != 0 ]]; then
        message "!!! ERROR !!! program returned $the_ret."
    else
        message "Test completed successfully."
    fi

    # now put logs in correct place
    if [ -f ${slogfile}.0 ]; then
        mv ${slogfile}.0 $slogfile
    fi
    if [ -f ${slogfile}.1 ]; then
       mv ${slogfile}.1 $clogfile
    fi

    now=`date`
    message "Finished at ${now}"
}

# do normal test first
now=`date`
message "== Starting normal tests: ${now}"
for proto in ${n_protos[@]-}; do
    if [ $proto = "none" ]; then
        continue;
    fi
    for num in ${instances[@]-}; do
        for sz in ${n_sizes[@]-}; do
            for lm in ${n_limits[@]-}; do

                if [[ $proto == "bmi+tcp" && $num -gt 1 ]]; then
                    continue;  # BMI doesn't do well with >1 instances
                fi

                i=1
                while [ $i -le $n_repeats ]; do
                    run_one $proto $num $sz "" $lm $i $n_nrpcs \
                            $n_repeats $n_timeout
                    i=$((i + 1))
                done

            done
        done
    done
done
now=`date`
message "DONE normal tests: ${now}"

message "Generate result files"
for proto in ${n_protos[@]-}; do
    if [ $proto = "none" ]; then
        continue;
    fi
    for num in ${instances[@]-}; do
        for sz in ${n_sizes[@]-}; do
            find ${jobdir}/${proto} -iname "n*-${proto}-${num}-${sz}-*" | xargs cat | \
                ${dfsu_prefix}/scripts/process_runner.pl > \
                ${jobdir}/norm-${proto}-${num}-${sz}.result
            if [ ! -s ${jobdir}/norm-${proto}-${num}-${sz}.result ]; then
                message "!!! WARN !!! NO RESULTS: ${jobdir}/norm-${proto}-${num}-${sz}"
                rm -f ${jobdir}/norm-${proto}-${num}-${sz}.result
            fi
        done
    done
done
message "DONE generate result files"


# do bulk test next
now=`date`
message "== Starting bulk tests: ${now}"
for proto in ${b_protos[@]-}; do
    if [ $proto = "none" ]; then
        continue;
    fi
    for num in ${instances[@]-}; do
        for sz in ${b_Sizes[@]-}; do
            for lm in ${b_limits[@]-}; do

                if [[ $proto == "bmi+tcp" && $num -gt 1 ]]; then
                    continue;  # BMI doesn't do well with >1 instances
                fi

                i=1
                while [ $i -le $b_repeats ]; do
                    run_one $proto $num "" $sz $lm $i $b_nrpcs \
                            $b_repeats $b_timeout
                    i=$((i + 1))
                done

            done
        done
    done
done
now=`date`
message "DONE bulk tests: ${now}"

message "Generate result files"
for proto in ${b_protos[@]-}; do
    if [ $proto = "none" ]; then
        continue;
    fi
    for num in ${instances[@]-}; do
        for sz in ${b_Sizes[@]-}; do
            find ${jobdir}/${proto} -iname "b*-${proto}-${num}-${sz}-*" | xargs cat | \
                ${dfsu_prefix}/scripts/process_runner.pl > \
                ${jobdir}/bulk-${proto}-${num}-${sz}.result
            if [ ! -s ${jobdir}/bulk-${proto}-${num}-${sz}.result ]; then
                message "!!! WARN !!! NO RESULTS: ${jobdir}/bulk-${proto}-${num}-${sz}"
                rm -f ${jobdir}/bulk-${proto}-${num}-${sz}.result
            fi
        done
    done
done
message "DONE generate result files"

message "== Listing results ..."
for result in $(find $jobdir -iname "*.result"); do
    message ""
    message "$result"
    cat $result | tee -a $logfile
    message ""
    message "----------"
done
message "DONE listing results"

# overall time
timeout=`date`
message "Script complete."
message "start: ${timein}"
message "  end: ${timeout}"

exit 0
